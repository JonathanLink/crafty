const { join } = require("path");
const { writeFileSync, unlinkSync } = require("fs");

function normalizeJestOptions(crafty, cli, args) {
  const moduleDirectories = new Set(["node_modules"]);

  if (cli.flags.moduleDirectories) {
    while ((idx = args.indexOf("--moduleDirectories")) > -1) {
      args.splice(idx, 2);
    }

    cli.flags.moduleDirectories
      .split(",")
      .forEach(module => moduleDirectories.add(module));
  }

  const moduleFileExtensions = new Set(["js", "json"]);
  if (cli.flags.moduleFileExtensions) {
    while ((idx = args.indexOf("--moduleFileExtensions")) > -1) {
      args.splice(idx, 2);
    }

    cli.flags.moduleFileExtensions
      .split(",")
      .forEach(extension => moduleFileExtensions.add(extension));
  }

  const options = {
    moduleDirectories: [...moduleDirectories],
    moduleFileExtensions: [...moduleFileExtensions],
    testPathIgnorePatterns: ["/node_modules/", crafty.config.destination],
    moduleNameMapper: {
      "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": require.resolve(
        "./file-mock"
      ),
      "\\.(css|less|sass|scss)$": require.resolve("./style-mock")
    },
    bail: true,
    roots: [process.cwd()],
    transform: {},
    globals: {}
  };

  // Add custom transformer to ES import/export in node_modules
  options.transformIgnorePatterns = [];
  options.transform["[/\\\\]node_modules[/\\\\].+\\.m?js$"] = require.resolve(
    "./esm-transformer"
  );

  crafty.getImplementations("jest").forEach(preset => {
    preset.jest(crafty, options);
  });

  // Support all extensions that can be transformed for test files extensions, except for json
  const extensions = options.moduleFileExtensions
    .filter(extension => extension !== "json")
    .join("|");
  options.testRegex = `(/__tests__/.*|(\\.|/)(test|spec))\\.(${extensions})$`;

  return options;
}

function deleteOnExit(file) {
  process.addListener("exit", () => {
    try {
      unlinkSync(file);
    } catch (e) {
      console.log("Failed", e);
    }
  });
}

module.exports = {
  ide(crafty, input, cli) {
    return {
      "jest.config.js": {
        content: normalizeJestOptions(crafty, cli, []),
        serializer: content => `// This configuration was generated by Crafty
// This file is generated to improve IDE Integration
// You don't need to commit this file, nor need it to run \`crafty test\`

module.exports = ${JSON.stringify(content, null, 4)};
`
      }
    };
  },
  test(crafty, input, cli) {
    return new Promise((resolve, reject) => {
      // Create config file in the current working directory
      // Creating it in a temp path breaks code coverage collection
      const configFile = join(process.cwd(), "jest-config-crafty.json");
      deleteOnExit(configFile);

      // node crafty test <keep next args>
      const argv = process.argv.slice(3);

      const options = normalizeJestOptions(crafty, cli, argv);

      // Write options to file and set config file option
      writeFileSync(configFile, `${JSON.stringify(options, null, 2)}\n`);
      argv.push("--config");
      argv.push(configFile);

      require("jest-cli")
        .run(argv)
        .then(resolve, reject);
    });
  }
};
