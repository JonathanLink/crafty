const path = require("path");
const fs = require("fs");
const childProcess = require("child_process");

const { normalizeJestOptions, isModuleMode } = require("./configuration");

function deleteOnExit(file) {
  process.addListener("exit", () => {
    try {
      if (fs.existsSync(file)) {
        fs.unlinkSync(file);
      }
    } catch (e) {
      console.error("Failed to delete ", file, e);
    }
  });
}

module.exports = {
  normalizeJestOptions,
  ide() {
    return {
      "jest.config.mjs": {
        shouldIgnore: false,
        alternativeFiles: ["jest.config.js"],
        content: `// AUTOGENERATED BY CRAFTY - DO NOT EDIT
// This file helps IDEs autoconfigure themselves
// any change here will only be used by your IDE, not by Crafty

/* global process */
import { initialize } from "@swissquote/crafty";
import { normalizeJestOptions } from "@swissquote/crafty-preset-jest";

const crafty = await initialize(process.argv);

const config = normalizeJestOptions(crafty, process.argv);
export default config;
`
      }
    };
  },
  test(crafty, input, cli) {
    return new Promise((resolve, reject) => {
      // Create config file in the current working directory
      // Creating it in a temp path breaks code coverage collection
      const configFile = path.join(process.cwd(), "jest-config-crafty.json");
      deleteOnExit(configFile);

      const esmMode = isModuleMode();

      // node crafty test <keep next args>
      const argv = [path.join(__dirname, "run.js"), ...process.argv.slice(3)];

      // Start node with --experimental-vm-modules
      // in case the package is in module mode
      if (esmMode) {
        argv.unshift("--experimental-vm-modules");
      }

      const options = normalizeJestOptions(crafty, argv);

      // Write options to file and set config file option
      fs.writeFileSync(configFile, `${JSON.stringify(options, null, 2)}\n`);
      argv.push("--config");
      argv.push(configFile);

      const child = childProcess.spawn(process.argv[0], argv, {
        cwd: process.cwd(),
        env: process.env,
        stdio: "inherit"
      });

      child.on("error", reject);
      child.on("close", resolve);
    });
  }
};
