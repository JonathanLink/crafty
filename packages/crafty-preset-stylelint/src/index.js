const gulpTasks = require("./gulp");

function addUnsupportedBrowserSupportRule(rules, browsers) {
  const rule = "plugin/no-unsupported-browser-features";

  if (!rules[rule]) {
    rules[rule] = [true, {}];
  }

  if (!rules[rule][1].severity) {
    rules[rule][1].severity = "warning";
  }

  if (!rules[rule][1].browsers) {
    rules[rule][1].browsers = browsers;
  }

  // We are transpiling these features and can ignore the warnings
  if (!rules[rule][1].ignore) {
    rules[rule][1].ignore = [
      "rem",
      "calc",
      "css-initial-value",
      "css-image-set",
      "css-gradients",
      "css-nesting",
      "css-variables",
      "css-color-function"
    ];
  }
}

function addNoVariableInTranspiledFunction(rules, browsers) {
  const rule = "swissquote/no-variable-in-transpiled-function";

  if (!rules[rule]) {
    rules[rule] = [true, {}];
  }

  if (!rules[rule][1].severity) {
    rules[rule][1].severity = "warning";
  }

  if (!rules[rule][1].browsers) {
    rules[rule][1].browsers = browsers;
  }
}

module.exports = {
  presets: [require.resolve("@swissquote/crafty-preset-prettier")],
  defaultConfig() {
    return {
      // Enable this to be easier on the developer
      legacy_css: false,

      // Stylelint pattern
      stylelint_pattern: [
        "css/**/*.scss",
        "css/**/*.css",
        "!*.min.css",
        "!**/vendor/**/*.scss",
        "!**/vendor/**/*.css",
        "!**/vendor/*.scss",
        "!**/vendor/*.css"
      ],

      // Stylelint modern configuration
      stylelint: {
        plugins: [require.resolve("@swissquote/stylelint-config-swissquote")],
        extends: ["@swissquote/stylelint-config-swissquote/recommended"].map(
          require.resolve
        ),
        rules: {}
      },

      // Stylelint legacy configuration
      stylelint_legacy: {
        extends: ["@swissquote/stylelint-config-swissquote/legacy"].map(
          require.resolve
        ),
        rules: {}
      }
    };
  },
  config(config) {
    // Set prettier configuration for CSS
    config.prettier.overrides = config.prettier.overrides || [];
    config.prettier.overrides.push({
      files: ["*.css", "*.scss"],
      options: { tabWidth: 4 }
    });

    // Add rules that need the current browsers configurations
    addNoVariableInTranspiledFunction(config.stylelint.rules, config.browsers);
    addUnsupportedBrowserSupportRule(config.stylelint.rules, config.browsers);
    addUnsupportedBrowserSupportRule(
      config.stylelint_legacy.rules,
      config.browsers
    );

    return config;
  },
  commands() {
    return {
      cssLint: {
        //eslint-disable-next-line no-unused-vars
        command(crafty, input, cli) {
          global.craftyConfig = crafty.config;
          require("./commands/lint_css");
        },
        description: "Lint CSS for errors"
      }
    };
  },
  gulp(crafty, gulp /*, StreamHandler */) {
    // CSS Linter
    const lintTaskName = "css__lint";
    crafty.watcher.add(crafty.config.stylelint_pattern, lintTaskName);
    gulpTasks.createLinter(gulp, crafty, lintTaskName);
    crafty.addDefaultTask(lintTaskName);
  },
  ide(crafty) {
    return {
      "stylelint.config.js": {
        content: crafty.config.legacy_css
          ? crafty.config.stylelint_legacy
          : crafty.config.stylelint,
        serializer: content => `// This configuration was generated by Crafty
// This file is generated to improve IDE Integration
// You don't need to commit this file, nor need it to run \`crafty build\`

module.exports = ${JSON.stringify(content, null, 4)};
`
      }
    };
  }
};
