diff --git a/dist/rollup-plugin-typescript2.cjs.js b/dist/rollup-plugin-typescript2.cjs.js
index 25216722f1a6a073bee3780f2985e22428e3b6fe..e8b73086a45f2c0db9a62b24c87b415d01ee5f57 100644
--- a/dist/rollup-plugin-typescript2.cjs.js
+++ b/dist/rollup-plugin-typescript2.cjs.js
@@ -27641,9 +27641,9 @@ function printDiagnostics(context, diagnostics, pretty = true) {
 function convertEmitOutput(output, references) {
     const out = { code: "", references };
     output.outputFiles.forEach((e) => {
-        if (e.name.endsWith(".d.ts"))
+        if (e.name.endsWith(".d.ts") || e.name.endsWith(".d.cts") || e.name.endsWith(".d.mts"))
             out.dts = e;
-        else if (e.name.endsWith(".d.ts.map"))
+        else if (e.name.endsWith(".d.ts.map") || e.name.endsWith(".d.cts.map") || e.name.endsWith(".d.mts.map"))
             out.dtsmap = e;
         else if (e.name.endsWith(".map"))
             out.map = e.text;
@@ -27693,7 +27693,7 @@ class TsCache {
             .map((entry) => tsModule.resolveTypeReferenceDirective(entry, undefined, options, tsModule.sys))
             .filter((entry) => { var _a; return (_a = entry.resolvedTypeReferenceDirective) === null || _a === void 0 ? void 0 : _a.resolvedFileName; })
             .map((entry) => entry.resolvedTypeReferenceDirective.resolvedFileName);
-        this.ambientTypes = rootFilenames.filter(file => file.endsWith(".d.ts"))
+        this.ambientTypes = rootFilenames.filter(file => file.endsWith(".d.ts") || file.endsWith(".d.mts") || file.endsWith(".d.cts"))
             .concat(automaticTypes)
             .map((id) => ({ id, snapshot: this.host.getScriptSnapshot(id) }));
         this.checkAmbientTypes();
@@ -28065,7 +28065,7 @@ const typescript = (options) => {
             const resolved = (_a = result.resolvedModule) === null || _a === void 0 ? void 0 : _a.resolvedFileName;
             if (!resolved)
                 return;
-            if (resolved.endsWith(".d.ts"))
+            if (resolved.endsWith(".d.ts") || resolved.endsWith(".d.mts") || resolved.endsWith(".d.cts"))
                 return;
             if (!filter(resolved))
                 return;
@@ -28114,7 +28114,7 @@ const typescript = (options) => {
                 // Rollup can't see these otherwise, because they are "emit-less" and produce no JS
                 if (result.references && supportsThisLoad) {
                     for (const ref of result.references) {
-                        if (ref.endsWith(".d.ts"))
+                        if (ref.endsWith(".d.ts") || ref.endsWith(".d.cts") || ref.endsWith(".d.mts"))
                             continue;
                         const module = yield this.resolve(ref, id);
                         if (!module || transformedFiles.has(module.id)) // check for circular references (per https://rollupjs.org/guide/en/#thisload)
@@ -28201,7 +28201,7 @@ const typescript = (options) => {
                 let entryText = entry.text;
                 const cachePlaceholder = `${pluginOptions.cacheRoot}/placeholder`;
                 // modify declaration map sources to correct relative path (only if outputting)
-                if (extension === ".d.ts.map" && ((_output === null || _output === void 0 ? void 0 : _output.file) || (_output === null || _output === void 0 ? void 0 : _output.dir))) {
+                if ((extension === ".d.ts.map" || extension == ".d.mts.map" || extension == ".d.cts.map") && ((_output === null || _output === void 0 ? void 0 : _output.file) || (_output === null || _output === void 0 ? void 0 : _output.dir))) {
                     const declarationDir = (_output.file ? require$$0$1.dirname(_output.file) : _output.dir);
                     const parsedText = JSON.parse(entryText);
                     // invert back to absolute, then make relative to declarationDir
@@ -28221,6 +28221,7 @@ const typescript = (options) => {
             };
             Object.keys(declarations).forEach((key) => {
                 const { type, map } = declarations[key];
+				// TODO adapt to mts/cts extension
                 emitDeclaration(key, ".d.ts", type);
                 emitDeclaration(key, ".d.ts.map", map);
             });
