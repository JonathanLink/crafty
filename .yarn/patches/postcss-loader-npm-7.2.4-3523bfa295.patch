diff --git a/dist/index.js b/dist/index.js
index 54fa73eccaaf8310cfe13ab0acd785725d9d4369..8969eb2f6a02b0ff75ef50e7ddf11815af1f80bf 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -29,26 +29,16 @@ let hasExplicitDependencyOnPostCSS = false;
 async function loader(content, sourceMap, meta) {
   const options = this.getOptions(_options.default);
   const callback = this.async();
-  const configOption = typeof options.postcssOptions === "undefined" || typeof options.postcssOptions.config === "undefined" ? true : options.postcssOptions.config;
   const postcssFactory = (0, _utils.getPostcssImplementation)(this, options.implementation);
   if (!postcssFactory) {
     callback(new Error(`The Postcss implementation "${options.implementation}" not found`));
     return;
   }
-  let loadedConfig;
-  if (configOption) {
-    try {
-      loadedConfig = await (0, _utils.loadConfig)(this, configOption, options.postcssOptions);
-    } catch (error) {
-      callback(error);
-      return;
-    }
-  }
   const useSourceMap = typeof options.sourceMap !== "undefined" ? options.sourceMap : this.sourceMap;
   const {
     plugins,
     processOptions
-  } = await (0, _utils.getPostcssOptions)(this, loadedConfig, options.postcssOptions);
+  } = await (0, _utils.getPostcssOptions)(this, undefined, options.postcssOptions);
   if (useSourceMap) {
     processOptions.map = {
       inline: false,
diff --git a/dist/utils.js b/dist/utils.js
index a683380ae818654af5b38e554b429cbf76aa34c7..d17172ea071d2c553cecaec62e7821127eb2df58 100644
--- a/dist/utils.js
+++ b/dist/utils.js
@@ -7,15 +7,12 @@ exports.exec = exec;
 exports.findPackageJSONDir = findPackageJSONDir;
 exports.getPostcssImplementation = getPostcssImplementation;
 exports.getPostcssOptions = getPostcssOptions;
-exports.loadConfig = loadConfig;
 exports.normalizeSourceMap = normalizeSourceMap;
 exports.normalizeSourceMapAfterPostcss = normalizeSourceMapAfterPostcss;
 exports.reportError = reportError;
 var _path = _interopRequireDefault(require("path"));
-var _url = _interopRequireDefault(require("url"));
 var _module = _interopRequireDefault(require("module"));
 var _full = require("klona/full");
-var _cosmiconfig = require("cosmiconfig");
 var _Error = _interopRequireDefault(require("./Error"));
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 const parentModule = module;
@@ -42,114 +39,6 @@ function exec(code, loaderContext) {
   module._compile(code, resource);
   return module.exports;
 }
-let tsLoader;
-async function loadConfig(loaderContext, config, postcssOptions) {
-  const searchPath = typeof config === "string" ? _path.default.resolve(config) : _path.default.dirname(loaderContext.resourcePath);
-  let stats;
-  try {
-    stats = await stat(loaderContext.fs, searchPath);
-  } catch (errorIgnore) {
-    throw new Error(`No PostCSS config found in: ${searchPath}`);
-  }
-  let isTsNodeInstalled = false;
-  try {
-    // eslint-disable-next-line import/no-extraneous-dependencies, global-require
-    require("ts-node");
-    isTsNodeInstalled = true;
-  } catch (_) {
-    // Nothing
-  }
-  const moduleName = "postcss";
-  const searchPlaces = isTsNodeInstalled ? ["package.json", `.${moduleName}rc`, `.${moduleName}rc.json`, `.${moduleName}rc.yaml`, `.${moduleName}rc.yml`, `.${moduleName}rc.js`, `.${moduleName}rc.mjs`, `.${moduleName}rc.cjs`, `.${moduleName}rc.ts`, `.${moduleName}rc.mts`, `.${moduleName}rc.cts`, `.config/${moduleName}rc`, `.config/${moduleName}rc.json`, `.config/${moduleName}rc.yaml`, `.config/${moduleName}rc.yml`, `.config/${moduleName}rc.js`, `.config/${moduleName}rc.mjs`, `.config/${moduleName}rc.cjs`, `.config/${moduleName}rc.ts`, `.config/${moduleName}rc.mts`, `.config/${moduleName}rc.cts`, `${moduleName}.config.js`, `${moduleName}.config.mjs`, `${moduleName}.config.cjs`, `${moduleName}.config.ts`, `${moduleName}.config.mts`, `${moduleName}.config.cts`] : ["package.json", `.${moduleName}rc`, `.${moduleName}rc.json`, `.${moduleName}rc.yaml`, `.${moduleName}rc.yml`, `.${moduleName}rc.js`, `.${moduleName}rc.mjs`, `.${moduleName}rc.cjs`, `.config/${moduleName}rc`, `.config/${moduleName}rc.json`, `.config/${moduleName}rc.yaml`, `.config/${moduleName}rc.yml`, `.config/${moduleName}rc.js`, `.config/${moduleName}rc.mjs`, `.config/${moduleName}rc.cjs`, `${moduleName}.config.js`, `${moduleName}.config.mjs`, `${moduleName}.config.cjs`];
-  const loaders = {
-    ".js": async (...args) => {
-      let result;
-      try {
-        result = _cosmiconfig.defaultLoaders[".js"](...args);
-      } catch (error) {
-        let importESM;
-        try {
-          // eslint-disable-next-line no-new-func
-          importESM = new Function("id", "return import(id);");
-        } catch (e) {
-          importESM = null;
-        }
-        if (error.code === "ERR_REQUIRE_ESM" && _url.default.pathToFileURL && importESM) {
-          const urlForConfig = _url.default.pathToFileURL(args[0]);
-          result = await importESM(urlForConfig);
-        } else {
-          throw error;
-        }
-      }
-      return result;
-    },
-    ".mjs": async (...args) => {
-      let result;
-      let importESM;
-      try {
-        // eslint-disable-next-line no-new-func
-        importESM = new Function("id", "return import(id);");
-      } catch (e) {
-        importESM = null;
-      }
-      if (_url.default.pathToFileURL && importESM) {
-        const urlForConfig = _url.default.pathToFileURL(args[0]);
-        result = await importESM(urlForConfig);
-      } else {
-        throw new Error("ESM is not supported");
-      }
-      return result;
-    }
-  };
-  if (isTsNodeInstalled) {
-    if (!tsLoader) {
-      // eslint-disable-next-line global-require
-      const {
-        TypeScriptLoader
-      } = require("cosmiconfig-typescript-loader");
-      tsLoader = TypeScriptLoader();
-    }
-    loaders[".cts"] = tsLoader;
-    loaders[".mts"] = tsLoader;
-    loaders[".ts"] = tsLoader;
-  }
-  const explorer = (0, _cosmiconfig.cosmiconfig)(moduleName, {
-    searchPlaces,
-    loaders
-  });
-  let result;
-  try {
-    if (stats.isFile()) {
-      result = await explorer.load(searchPath);
-    } else {
-      result = await explorer.search(searchPath);
-    }
-  } catch (error) {
-    throw error;
-  }
-  if (!result) {
-    return {};
-  }
-  loaderContext.addBuildDependency(result.filepath);
-  loaderContext.addDependency(result.filepath);
-  if (result.isEmpty) {
-    return result;
-  }
-  if (typeof result.config === "function") {
-    const api = {
-      mode: loaderContext.mode,
-      file: loaderContext.resourcePath,
-      // For complex use
-      webpackLoaderContext: loaderContext,
-      // Partial compatibility with `postcss-cli`
-      env: loaderContext.mode,
-      options: postcssOptions || {}
-    };
-    result.config = result.config(api);
-  }
-  result = (0, _full.klona)(result);
-  return result;
-}
 function loadPlugin(plugin, options, file) {
   try {
     // eslint-disable-next-line global-require, import/no-dynamic-require
